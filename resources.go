// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ3W/bNhB/z19BaC/bikodugDDQLvA7LnF0GZB3O2dls42MYrUSMqNoel/Hyiq+v5a7bhZkJcguvvxjryP39ESfnMfMnQAqajgM+cH95WDgPsioHw3c/74uHr5k/NmfoWJ1NRnML9CCGuqGcxvpdDCFwwthR+HwDXRVHDsWe0VQkkiCd8BcleUgUpTs1SBb1BGXRhKEveGhJCmlbVmdUQkQe4SlC9pZFZlJip2P4BSZJebLo0jGsycJHFXMWPWsGNNVj2+F3zX4XXIr9HRLXLfEbWiwAJVyLEmGwZoK0kIM4cwVjgsXGKfEaU4CVveSwWyZhsbMiZ2UsQR8gVTM+fHinGEsBFG4BvlJxro/cz53vFORrxyr8dBr5sQvQcSVCUIYSk+1SUIYeBaHufZabFnH7ohH48RDCPekw2wYUglk51A7DX2iL3WQbDeiKCxrlLftWoYPXil4If2jRnlfyHzB3hZ0SYkpqLzKrKP2DOw+bA9s8JEa8xvVuXfUh7APXJ/z+KmkBNAJMEnGgLnnwC2JGYabQlT8F2aYgijPVFUzZcFysVeIU0S4EGadraW7amltfgnYbE5jsHNc9nPKEmaei8D5GanJdXkK4PXE11PK/ZsqxV84WWdXXJD1ULBBr/ea+CGP8/PCDegNASo9DBCDteXIIfHQR9FTE6lkF+IGkHcxOEG5FdmmY4qG43RV2Katr2F4JpQTvmuYblU/Hc2s2kZp7MnxDrYq92gqqqyUHgcXu5OdC6my4I8Rm+vL0FvJ/KSOdv/gE5svM9OJae15aWaqqeN8oe+sV7/9VKUt/l585LBAVj/nMaUb4UMCRvsludJ/jzJnyf5k5rktb6fQj55jaxBHqj/Ze82Hn6Gd8zvD6D34nG8vHhwwrJnReOT/g7+jkFpNE5dd6AiwRVMgD44P+WpvAA55fFpMEkubdGIbfVcu9YSSEj5Lk2Ryv4faufBPdjItzZhxb27sOov3MZjvP00FBVe6nxtu/YJI9Le27Oqrff++I2n/74z1tMd+usxwHn17YZqZSnPtBtJoUV/W3++mAhtAtgPWLx4MaT+jRzIkP72qPd9fGFlb8Wg+28Grb+7HVLfxZtjh75R2i2aapNUOR6z4qtTVF8KPs/M7INFpcMrz0ObN+RmkjOKWkTRJGsmVZOANmeToG+nHWSx3hMZjTveTzuJyWsvsEVcTdpqkFadsjpuThV2usJe8UHq3wAAAP//9p3zJMIaAAA=",
	"html.tmpl": "H4sIAAAAAAAA/9xabW/bOBL+nl8xq3SRvslynKTtuYoP2DTd4rBtgybd2/t0oCXaIkqTWpFOk/P5vx9I6oWSKNlJnC5w6IdK5GhmOPPM8CGd8Kd3n8+u/nVxDolc0MneXmj+BwgTjGL1ABBKIimeXGRc8ohTeMej5QIziSThLAzMrJFcYIkgSlAmsDz1vl699994+RQl7BtkmJ56Qt5SLBKMpQfyNsWnnsQ3MoiE8CDJ8OzUS6RMxTgIZpxJMZhzPqcYpUQMIr5Qcn+foQWht6dfp0sml+Pj4fDl6+Hw5fFwSCSiJPKC3Kg2ZZ4Bpjy+hVX+AvCdxDIZw6shXrwtBxcomxM2hkO8ALSUvJqJOOXZGPZHo1E1qBz0jTNj8Iw73ksQiAlf4IzMKtEUxTFhc3/KpeSLMRxXZtd7+UNyaPmndX/HZJ7IMTCeLRCttE15FuOsVHaY3oDglMSwjxDqNjocnOCbttmRZXYXmq04Dk7wAoZtk0d/yUqRZVWBzo9xxDMNZGWZ4Xa+T169xqOTliaJphS30XQ4HP7cgIcg/8FjeGOP52uKOKUoFXgMxVPbjCrDrlC9Hg4tnSj6Ns/4ksV+4XocqX9tnboQZDZmMvGjhND4Kb7G7JkNgray2VT9ayuLW9ipJSmKolaS8uzAyJEhGUPaTBJhMWZSF2UbYW1sKRXW2g6fdekbvoXgOXziYAaAM5iRTEhIgTCl5nnQ1B08hyudeT6DGcE0FpXQQA/4BhkybrigPn2vBKoPLNTYzWCTtlGu7eo2xQ9WdpQr+w1NMXVoe3UXZce5sndYRBlJVVk5VNp91RlYfCMxE4QzO7jlYF+AzwuhbePSq/U+ge5VWAT7FyR2o7AI+KflYoozh8qTu2o82VEK2XIB14gusRjYSWTLRV/+PqHF9oHp0DXaFJM7aTvaTTxEhCjKTEQ06amFxcz6etbXs4UrmdW7krztHzmYg20r4kxiRZwqC/uSR74aR4ThDJbUUkuJkL4mStp0cx8sNlaKZ80WTAnDfuHVYW2Hc3TnyhOYACUwqe3GtY1tymnsWuJ7QjGoHZGwOcTkutZ7qfLFTG3YlmMiUopux2YTvzPVKNZ2rJhNm+G4HHIwrGac6075Eaa0X2eLyyBK5mwMmYrhlnot9CQYDj4evISD8wNALIaDPw5giuI5FnozTDBc8TMr4HrOEenBKxsiJTrqw6VThGkQTSmPvr3d60BW/Vt7rRFmEmdvN6OoxsVeKTC0iN6bv03R8Zt+QjWbDaM31rclzDWfUYcG8+TX6sRBi+psqoRehmKyFKrMburJD4P8KGPefvJ9+CpwBtFSSL6As8tL8P17nLQqiYEa1eemMDBnP/WoqGJhNDkEEp96+rzndR4Hk8NSfjQpe9JZ3pPCIBkV86qAtUK7N3nFaS1c0mK2HANYrTLE5hgGqhWI9bqcUFNPVH38m6k9ZHwKA7WZ1CRCSibWK0CI8jDsr1a5uDcpH8MANcSXtD5g+fMRC4HmDZc6zDqMv19SWjgQihQxiCgS4tTTZeZNPoaBGlXO/cbZvMNBg5S2udUKs7jlWen7OVsuHsvx80d1vCSK9/O+Asx67Ves072SP/KVKOT5FF9jWtFNsasVXeLsmkSPBqPLKhs7yEQY1Aui/l3zC+V/5Wyb8niTS0OSftckSZFuHVZba2UxDGJynXeSjqbQ3xB0+8mjY++rVrMJk5FuQe7mkIys5eRN8YqnVkRzHwtvUhhYLHJd7r59PSRMjgoX7Nw2qik5ssPeZUfNkRkMPiChD6J1kIWGcZYRKY94XqMJyupm0B7NJqGMJ1pxGMhYv6kcli/6hFm+WR6asUBmDUOBw1IozY7UBGcJgNa6Kv9cxSNjO6Wyta5CqMx0ngi1MisR5tWgtVuJElZB2GAqneg8PSUsxjcw+KyDJMCLcZrhCEkce/+N8QwtqYQZogI/W69DITPO5pN3pcxAUQY9VlTialXHRQ6Hd0aVrrr1On8bg5a2Z3ItYZB2LLKdwq620UpiGGioTfbq+/nCFIQu3sZe74Od8jxGDUOr1RNuTmwtBXkt4D9hAN41oiRGkmfmZsMrR/AgW1IsPGiuIDme/J6LxOZWRzGb4yZWzZqaKXbVTy9Cq6LqEMh9MRvRtqlx1temCitSklfaP4lMTOxb8d2wpq2qzjHsZGF1H5/mJQN59p8NviybZLGmkJLKHQ38HPGufbAw5drFc3WB28GHFY2zbKzCaXxPBXZg1iQNvhOZqGWu18DzDvxo2FVR7Uvx52oL+H9BrW7gkGaEyRl4P7+49tqQ3EUfvSMkGt/rEfCtsUKmTRc6eHY4rflZZxCNW8Y7sYjSnptJ/IJE9WKu+R6ZV/QfNHbFLfYfQi5qWs7McZqweUNfNXEn2mKCvAXs6wzDRTDgL2YY7u8a2O88Gu+Ej1dRqxVMeQPt1avKhVZTJ2VzvUchOMrAVQRlJHSO2vB3gn8L6G8FrA5YdQGkDY82OFrQaACjBYS+FlihofMmoeO2wEbI9n2zDwuP2DPvCpWebvkQuDy0Tz5Wl3wIlHfbIR+lALpvprqb4Y9uhB+xTHgMtX74Bf+5xEJCrQy+YJFyJnB9dNcFYNx5RPTna2vANh+tY9YgLJ+6lBlGC8Lm6zUI/Vwiaku7Jnwtw2bYbdnM3cf0j2r9FkafCIPz5pWBdeNgsuu6cui5cLCuG8zfsw1QSgaJlKlXdzI5ztGcn9M+XF1dwJSwmLB565LBdUzrptbOIDdLp0eoe/4CSYmzrmOc2n54fLtd3ram5+XhLs9YUXW9p7vV6kn370Nwj0uEnpJ+wjbzH+PzBqE8uhukVIjdItvS5vtSaeeNQwvIfRcOPwrH3bcNPxqID9oKHnTBsE2rvEPea182LxXs+RqxKH5a2fZnoGRkzNaZQtffzVQ/IjdSWPCFQZpxyesk4BOXWJRvZy9elM//QNeofLm4lYlFsn/l1Sf7ldCHi4pyLKe3LVbRAFcTVhXr0its/lKTFbRL/whfbMR7DihZAm0sFHBTC++ZP0vTDRpUgDaImLBtEPp1k6tnlwnK0j4zySZfVTrcIvXCqEO7Vg5WIYSBGQ6D/A/o/wcAAP//AQAA//+WJPSqUi8AAA==",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWzW7jNhC+6ymmUg9rL+TcF7YPjZtdFLtpsA56WRQNbY1tATKpipSRQOS7F/yRSFlW4gLpqT5Ymhlpfr75ZsQEHiom2JYVsGLb+ohUEJEzGs0JUHLERSxYGS/nN2QZRUkCj2RTILAd3DIqkAoeNU1F6B5hdpcXyJWKmubnXV7gX/p1+LSA2T05olIp/Ggad//nh6S7n0QATZNCvoPZN+Sc7JGDUkbrPLdqpQCsm6+M7kNXd3VRhO6QZs5FCkgzSDtJh/mV1sfzGEb3bgGeBVKeMzqI0hlcKA1aWuAJC/A2E9KDqFSKne2a8GusTvl2AGOr9lX+2wpbbQo/1ltSkAr+IEWN8PhSos6aG2V60spUaOUkupognnJdZo548xJIke/pIq7y/UHEyzmBQ4W7RZwYdj6yUj83vyktSbv3o6aZrZBvq7zUpFYqyMaTqhfYw+BZbzx6Rlz0qnH/QvhdjkWmfUowtyANOCDhK9lgARKCN0FGElL9A3uFvuh+IEMMtX/Xb+krBdnRVscLm2rliX3aZGEeNyl/yGmGzzD73eTDIc6wrHBLBGaxzHBH6kLAjhQcJ0pNp6vOOptOW440DWWbCvqQWEBW1oMhiVLgxE9gAAxNzpWp1FKsvXpow9mJpB8XD/EvhOvLfX3cYDUG9RDuDu1x2IOBvgR9D3kr6/1IcprT/bnFpuek/xg6a5r/lNoZPrb7NU2XwSi43fcOcyBBm97qwRWAm+JGwX4LwgCMIQhotr9D4BK3AhhGlnAIycUN/v/l59OAoE+jDPU96bXgjJ3+s3UdQV8h5zcUB5a1HP2Of9fIRdud78hLRjm28mh3zhtxLp7LMvzo6ATG97dL6XyNO3WwzW0TnH4tKiTHnO6VAm7uO8idV1vZ0K3VX/BrDa85fmvwBj3m7anEtdfNZ5LA8CyhmzUr9cm07cY9E8hBwu3HjyDhN3IiIOHhRRzMgH1m2pRo1ZcH3ct68zLWNHu9OFv+z9sDIpo0ffNCNppTtMUwhpsl9FWu07qEbv7KMrTpgkLZVhZqPvd83a4PpCq7pw89Z7r6Vu6A/icAAP//o9X/quoLAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
