{{/*
This template outputs markdown as used by Hugo (https://gohugo.io) static site generator.
It is based on the original markdown.tmpl from the protoc-gen-doc project.

The generated markdown should be put somewhere under the content folder from your Hugo site.
For example:
protoc --doc_out=./doc --doc_opt=hugo-md.tmpl,<hugo_site>content/protoc/index.md proto/*.proto

Then, the hugo development server should pick it up and serve the page at locahost:1313/protoc/,
in its default configuration.
*/ -}}

{{define "ref" -}}
  {{printf "{{< relref \"#%s\" >}}" .}}
{{- end -}}

---
title: "Protocol Documentation"
{{- /* Date is not available in protoc-gen-doc and has been omitted. */}}
draft: false
---

# Protocol Documentation

## Table of Contents
{{- /*
For this to work, you need a shortcode at layouts/shortcodes/toc.html with the contents:

  {{ .Page.TableOfContents }}

*/}}
{{`{{< toc >}}`}}

{{range .Files}}
{{$file_name := .Name}}

## {{.Name}} {{printf "{id=%q}" .Name}}
{{.Description}}

{{range .Messages}}

### {{.LongName}} {{printf "{id=%q}" .FullName}}
{{.Description}}

{{if .HasFields}}
| Field | Type | Label | Description |
| ----- | ---- | ----- | ----------- |
{{range .Fields -}}
  | {{.Name}} | [{{.LongType}}]({{template "ref" .FullType}}) | {{.Label}} | {{if (index .Options "deprecated"|default false)}}**Deprecated.** {{end}}{{nobr .Description}}{{if .DefaultValue}} Default: {{.DefaultValue}}{{end}} |
{{end}}
{{end}}

{{if .HasExtensions}}
| Extension | Type | Base | Number | Description |
| --------- | ---- | ---- | ------ | ----------- |
{{range .Extensions -}}
  | {{.Name}} | {{.LongType}} | {{.ContainingLongType}} | {{.Number}} | {{nobr .Description}}{{if .DefaultValue}} Default: {{.DefaultValue}}{{end}} |
{{end}}
{{end}}

{{end}} <!-- end messages -->

{{range .Enums}}

### {{.LongName}} {{printf "{id=%q}" .FullName}}
{{.Description}}

| Name | Number | Description |
| ---- | ------ | ----------- |
{{range .Values -}}
  | {{.Name}} | {{.Number}} | {{nobr .Description}} |
{{end}}

{{end}} <!-- end enums -->

{{if .HasExtensions}}

### File-level Extensions
| Extension | Type | Base | Number | Description |
| --------- | ---- | ---- | ------ | ----------- |
{{range .Extensions -}}
  | {{.Name}} | {{.LongType}} | {{.ContainingLongType}} | {{.Number}} | {{nobr .Description}}{{if .DefaultValue}} Default: `{{.DefaultValue}}`{{end}} |
{{end}}
{{end}} <!-- end HasExtensions -->

{{range .Services}}

### {{.Name}} {{printf "{id=%q}" .FullName}}
{{.Description}}

| Method Name | Request Type | Response Type | Description |
| ----------- | ------------ | ------------- | ------------|
{{range .Methods -}}
  | {{.Name}} | [{{.RequestLongType}}]({{template "ref" .RequestFullType}}){{if .RequestStreaming}} stream{{end}} | [{{.ResponseLongType}}](#{{.ResponseFullType}}){{if .ResponseStreaming}} stream{{end}} | {{nobr .Description}} |
{{end}}
{{end}} <!-- end services -->

{{end}}

## Scalar Value Types

| .proto Type | Notes | C++ | Java | Python | Go | C# | PHP | Ruby |
| ----------- | ----- | --- | ---- | ------ | -- | -- | --- | ---- |
{{range .Scalars -}}
  | <a name="{{.ProtoType}}" /> {{.ProtoType}} | {{.Notes}} | {{.CppType}} | {{.JavaType}} | {{.PythonType}} | {{.GoType}} | {{.CSharp}} | {{.PhpType}} | {{.RubyType}} |
{{end}}

{{/*
  The above named anchors get stripped by Hugo unless the following is set:
    [markup.goldmark.renderer]
      unsafe= true
*/}}
